{"type": "gap_detect", "user_request": "Implement a simple prime numbers module in Python, that verifies if a given int is a prime", "answers": {"tests_policy": {"create_tests": "no", "run_tests": false, "no_tests_reason": "User opted out", "minimum": "none", "test_folder": "tests/"}, "default_options": true, "simple_mode": true}, "simple_mode": true, "resp": "{\n  \"missing_fields\": [\n    \"goal\",\n    \"workspace_dir\",\n    \"artifacts\",\n    \"constraints\",\n    \"acceptance_criteria\",\n    \"run\",\n    \"context_paths\"\n  ],\n  \"questions\": []\n}"}
{"type": "gap_detect", "user_request": "Implement a simple prime numbers module in Python, that verifies if a given int is a prime", "answers": {"tests_policy": {"create_tests": "no", "run_tests": false, "no_tests_reason": "User opted out", "minimum": "none", "test_folder": "tests/"}, "default_options": true, "simple_mode": true}, "simple_mode": true, "resp": "{\n  \"missing_fields\": [],\n  \"questions\": []\n}"}
{"type": "json_synth", "answers": {"tests_policy": {"create_tests": "no", "run_tests": false, "no_tests_reason": "User opted out", "minimum": "none", "test_folder": "tests/"}, "default_options": true, "simple_mode": true}, "simple_mode": true, "json": "{\n  \"goal\": \"Implement a simple prime numbers module in Python. Create new files under 'primes/':\\n  - primes/module.py with:\\n      - is_prime(n: int) -> bool: return True if n is prime, else False (O(sqrt(n))).\\n      - primes_up_to(n: int) -> list[int]: return all primes <= n; return [] for n < 2.\\n      - prime_factors(n: int) -> list[int]: return the prime factorization of n; raise ValueError for n < 2.\\n  - app.py that reads an integer N from argv (or prompts if missing) and prints True/False indicating primality.\\n\\nConstraints:\\n  - Pure Python (standard library only).\\n  - Include type hints and docstrings; follow PEP 8.\\n  - Clear, testable code.\",\n  \"default_options\": true,\n  \"workspace_dir\": \"primes/\",\n  \"artifacts\": [\n    \"primes/primes/__init__.py\",\n    \"primes/primes/module.py\",\n    \"primes/app.py\"\n  ],\n  \"constraints\": {\n    \"language\": \"python\",\n    \"python_version\": \"3.12.5\",\n    \"os\": \"windows\",\n    \"dependencies\": {\n      \"allowed\": [\n        \"typing\"\n      ],\n      \"notes\": \"Pure Python preferred; standard library only\"\n    },\n    \"style\": \"PEP8, type hints, clear docstrings\"\n  },\n  \"acceptance_criteria\": [\n    \"is_prime(2) == True, is_prime(1) == False, is_prime(4) == False, is_prime(29) == True\",\n    \"primes_up_to(10) returns [2, 3, 5, 7]; primes_up_to(1) returns []\",\n    \"prime_factors(28) returns [2, 2, 7]; prime_factors(n) raises ValueError for n < 2\",\n    \"Running `python primes/app.py 29` prints `True` on a single line\",\n    \"If no CLI argument is provided, the app prompts for an integer and then prints True/False\"\n  ],\n  \"run\": {\n    \"command\": \"python primes/app.py 29\",\n    \"notes\": \"Windows + Python 3.12.5\"\n  },\n  \"tests_policy\": {\n    \"create_tests\": false,\n    \"test_folder\": \"tests/\",\n    \"minimum\": \"none\",\n    \"run_tests\": false,\n    \"no_tests_reason\": \"User opted out\"\n  },\n  \"context_paths\": [\n    \"config/example_tasks/\"\n  ]\n}"}
